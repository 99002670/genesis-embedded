/*
 * STM32F407xx_gpio_driver.c
 *
 *  Created on: 30-Sep-2020
 *      Author: Training
 */

#include "STM32F407xx_gpio_driver.h"
#include "STM32F407xx.h"

/**************************** API DEFINITIONS *******************************/
void GPIO_Peri_CLKControl(GPIO_REGDEF_t *pGPIOx, uint8_t EorDi)
{
	if(EorDi == ENABLE)
		{
		if(pGPIOx == GPIOA)
			{
				RCC_GPIOA_CLK_EN();
			}
		else if (pGPIOx == GPIOB)
			{
				RCC_GPIOB_CLK_EN();
			}
		else if (pGPIOx == GPIOC)
			{
				RCC_GPIOC_CLK_EN();
			}
		else if (pGPIOx == GPIOD)
			{
				RCC_GPIOD_CLK_EN();
			}
		else if (pGPIOx == GPIOE)
			{
				RCC_GPIOE_CLK_EN();
			}
		else if (pGPIOx == GPIOF)
			{
				RCC_GPIOF_CLK_EN();
			}
		else if (pGPIOx == GPIOG)
			{
				RCC_GPIOG_CLK_EN();
			}
		else if_(pGPIOx == GPIOH)
			{
				RCC_GPIOH_CLK_EN();
			}
		else if (pGPIOx == GPIOI)
			{
				RCC_GPIOI_CLK_EN();
			}
		}

	else
	{
		//Do it
	}

}

}
void GPIO_init(GPIO_Handle_t *GPIOHandle)
{
	//Init MODE
	uint32_t temp = 0;
	temp = (GPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*GPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
	GPIOHandle -> pGPIOx -> MODER = temp;
	//Configure Speed

	//Configue PullUp or PullDown

	//Configure Output type

	//Configure Alternative Function
}


void GPIO_Deinit(GPIO_REGDEF_t *pGPIOx)
{

}
uint8_t GPIO_Read_fromInputPin(GPIO_REGDEF_t *pGPIOx, uint8_t PinNo)
{

}
uint8_t GPIO_Read_fromInputPort(GPIO_REGDEF_t *pGPIOx)
{

}
void GPIO_Write_toOutputPin(GPIO_REGDEF_t * pGPIOx, uint8_t PinNO, uint8_t value)
{

}
void GPIO_Write_toOutputPort(GPIO_REGDEF_t * pGPIOx, uint16_t value)
{

}
void GPIO_Toggle_OutputPin(GPIO_REGDEF_t * pGPIOx, uint8_t PinNo)
{

}
/****************************************************************************/
