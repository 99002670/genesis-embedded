
Learn03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000049c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000644  0800064c  0001064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000644  08000644  0001064c  2**0
                  CONTENTS
  4 .ARM          00000000  08000644  08000644  0001064c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000644  0800064c  0001064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000644  08000644  00010644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000648  08000648  00010648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800064c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800064c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001064c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f92  00000000  00000000  0001067c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002f1  00000000  00000000  0001160e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  00011900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000080  00000000  00000000  000119a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001fe2  00000000  00000000  00011a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000b53  00000000  00000000  00013a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000091cc  00000000  00000000  0001455d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001d729  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  0001d7a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800062c 	.word	0x0800062c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800062c 	.word	0x0800062c

080001e8 <GPIO_Peri_CLKControl>:
 * @Date and time:
 *
 *
 */
void GPIO_Peri_CLKControl(GPIO_REGDEF_t *pGPIOx, uint8_t EorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d161      	bne.n	80002be <GPIO_Peri_CLKControl+0xd6>
		{
			if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a33      	ldr	r2, [pc, #204]	; (80002cc <GPIO_Peri_CLKControl+0xe4>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_Peri_CLKControl+0x28>
				{
					RCC_GPIOA_CLK_EN();
 8000202:	4b33      	ldr	r3, [pc, #204]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a32      	ldr	r2, [pc, #200]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Do Nothing
	}

}
 800020e:	e056      	b.n	80002be <GPIO_Peri_CLKControl+0xd6>
			else if (pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a30      	ldr	r2, [pc, #192]	; (80002d4 <GPIO_Peri_CLKControl+0xec>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_Peri_CLKControl+0x3e>
					RCC_GPIOB_CLK_EN();
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e04b      	b.n	80002be <GPIO_Peri_CLKControl+0xd6>
			else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <GPIO_Peri_CLKControl+0xf0>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_Peri_CLKControl+0x54>
					RCC_GPIOC_CLK_EN();
 800022e:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a27      	ldr	r2, [pc, #156]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e040      	b.n	80002be <GPIO_Peri_CLKControl+0xd6>
			else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a27      	ldr	r2, [pc, #156]	; (80002dc <GPIO_Peri_CLKControl+0xf4>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_Peri_CLKControl+0x6a>
					RCC_GPIOD_CLK_EN();
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e035      	b.n	80002be <GPIO_Peri_CLKControl+0xd6>
			else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a22      	ldr	r2, [pc, #136]	; (80002e0 <GPIO_Peri_CLKControl+0xf8>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_Peri_CLKControl+0x80>
					RCC_GPIOE_CLK_EN();
 800025a:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a1c      	ldr	r2, [pc, #112]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e02a      	b.n	80002be <GPIO_Peri_CLKControl+0xd6>
			else if (pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a1d      	ldr	r2, [pc, #116]	; (80002e0 <GPIO_Peri_CLKControl+0xf8>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_Peri_CLKControl+0x96>
					RCC_GPIOF_CLK_EN();
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e01f      	b.n	80002be <GPIO_Peri_CLKControl+0xd6>
			else if (pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a17      	ldr	r2, [pc, #92]	; (80002e0 <GPIO_Peri_CLKControl+0xf8>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_Peri_CLKControl+0xac>
					RCC_GPIOG_CLK_EN();
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e014      	b.n	80002be <GPIO_Peri_CLKControl+0xd6>
			else if (pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <GPIO_Peri_CLKControl+0xf8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_Peri_CLKControl+0xc2>
					RCC_GPIOH_CLK_EN();
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e009      	b.n	80002be <GPIO_Peri_CLKControl+0xd6>
			else if (pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <GPIO_Peri_CLKControl+0xf8>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d105      	bne.n	80002be <GPIO_Peri_CLKControl+0xd6>
					RCC_GPIOI_CLK_EN();
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <GPIO_Peri_CLKControl+0xe8>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020400 	.word	0x40020400
 80002d8:	40020800 	.word	0x40020800
 80002dc:	40020c00 	.word	0x40020c00
 80002e0:	40021000 	.word	0x40021000

080002e4 <GPIO_init>:
 * @Date and time:
 *
 *
 */
void GPIO_init(GPIO_Handle_t *GPIOHandle)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b087      	sub	sp, #28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	//Init MODE
	uint32_t temp = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]
	temp = (GPIOHandle-> GPIO_PinConfig.GPIO_PinMode<<(2*GPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	795b      	ldrb	r3, [r3, #5]
 80002f4:	461a      	mov	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	791b      	ldrb	r3, [r3, #4]
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000300:	617b      	str	r3, [r7, #20]
	(GPIOHandle -> pGPIOx -> MODER)	&= ~(0x3<<2*GPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	791b      	ldrb	r3, [r3, #4]
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	43db      	mvns	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
	(GPIOHandle -> pGPIOx -> MODER) |= temp;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	6819      	ldr	r1, [r3, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	697a      	ldr	r2, [r7, #20]
 800032c:	430a      	orrs	r2, r1
 800032e:	601a      	str	r2, [r3, #0]

	//Configure Speed
	temp = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
	temp = (GPIOHandle-> GPIO_PinConfig.GPIO_PinSpeed<<(2*GPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	799b      	ldrb	r3, [r3, #6]
 8000338:	461a      	mov	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	791b      	ldrb	r3, [r3, #4]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	fa02 f303 	lsl.w	r3, r2, r3
 8000344:	617b      	str	r3, [r7, #20]
	(GPIOHandle -> pGPIOx ->OSPEEDR) &= ~(0x3<<2*GPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	2103      	movs	r1, #3
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	4619      	mov	r1, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	400a      	ands	r2, r1
 8000362:	609a      	str	r2, [r3, #8]
	(GPIOHandle -> pGPIOx ->OSPEEDR) |= temp;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6899      	ldr	r1, [r3, #8]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	697a      	ldr	r2, [r7, #20]
 8000370:	430a      	orrs	r2, r1
 8000372:	609a      	str	r2, [r3, #8]
	//Configue PullUp or PullDown
	temp = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
	temp = (GPIOHandle-> GPIO_PinConfig.GPIO_PinPupdControl<<(2*GPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	7a1b      	ldrb	r3, [r3, #8]
 800037c:	461a      	mov	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	791b      	ldrb	r3, [r3, #4]
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	fa02 f303 	lsl.w	r3, r2, r3
 8000388:	617b      	str	r3, [r7, #20]
	(GPIOHandle -> pGPIOx ->PUPDR) &= ~(0x3<<2*GPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	68da      	ldr	r2, [r3, #12]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	791b      	ldrb	r3, [r3, #4]
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	2103      	movs	r1, #3
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	43db      	mvns	r3, r3
 800039e:	4619      	mov	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	400a      	ands	r2, r1
 80003a6:	60da      	str	r2, [r3, #12]
	(GPIOHandle -> pGPIOx ->PUPDR) |= temp;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	68d9      	ldr	r1, [r3, #12]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	697a      	ldr	r2, [r7, #20]
 80003b4:	430a      	orrs	r2, r1
 80003b6:	60da      	str	r2, [r3, #12]
	//Configure Output type
	temp = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
	temp = (GPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<(GPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	79db      	ldrb	r3, [r3, #7]
 80003c0:	461a      	mov	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	791b      	ldrb	r3, [r3, #4]
 80003c6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ca:	617b      	str	r3, [r7, #20]
	(GPIOHandle -> pGPIOx -> ODR) &= ~(0x1<<2*GPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	695a      	ldr	r2, [r3, #20]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	791b      	ldrb	r3, [r3, #4]
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	2101      	movs	r1, #1
 80003da:	fa01 f303 	lsl.w	r3, r1, r3
 80003de:	43db      	mvns	r3, r3
 80003e0:	4619      	mov	r1, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	400a      	ands	r2, r1
 80003e8:	615a      	str	r2, [r3, #20]
	(GPIOHandle -> pGPIOx -> ODR) |= temp;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6959      	ldr	r1, [r3, #20]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	615a      	str	r2, [r3, #20]
	//Configure Alternative Function
	if (GPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_Mode_Afn)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	795b      	ldrb	r3, [r3, #5]
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d12a      	bne.n	8000458 <GPIO_init+0x174>
	{
		uint32_t temp1 = (GPIOHandle -> GPIO_PinConfig.GPIO_PinNumber/8);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	613b      	str	r3, [r7, #16]
		uint32_t temp2 = (GPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%8);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	791b      	ldrb	r3, [r3, #4]
 8000410:	f003 0307 	and.w	r3, r3, #7
 8000414:	60fb      	str	r3, [r7, #12]
		GPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << 4*temp2);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	693a      	ldr	r2, [r7, #16]
 800041c:	3208      	adds	r2, #8
 800041e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	210f      	movs	r1, #15
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4011      	ands	r1, r2
 8000436:	693a      	ldr	r2, [r7, #16]
 8000438:	3208      	adds	r2, #8
 800043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOHandle -> pGPIOx->AFR[temp1] = (GPIOHandle -> GPIO_PinConfig.GPIO_PinAltFuncMode<<(4*temp2));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7a5b      	ldrb	r3, [r3, #9]
 8000442:	461a      	mov	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	409a      	lsls	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4611      	mov	r1, r2
 8000450:	693a      	ldr	r2, [r7, #16]
 8000452:	3208      	adds	r2, #8
 8000454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000458:	bf00      	nop
 800045a:	371c      	adds	r7, #28
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <GPIO_Read_fromInputPin>:
 * @Date and time:
 *
 *
 */
uint8_t GPIO_Read_fromInputPin(GPIO_REGDEF_t *pGPIOx, uint8_t PinNo)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	70fb      	strb	r3, [r7, #3]
	uint8_t val = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]
	val = (uint8_t)(pGPIOx -> IDR >> PinNo) & (0x00000001);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	691a      	ldr	r2, [r3, #16]
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	fa22 f303 	lsr.w	r3, r2, r3
 800047e:	b2db      	uxtb	r3, r3
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	73fb      	strb	r3, [r7, #15]
	return val;
 8000486:	7bfb      	ldrb	r3, [r7, #15]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <GPIO_Write_toOutputPin>:
 * @Date and time:
 *
 *
 */
void GPIO_Write_toOutputPin(GPIO_REGDEF_t * pGPIOx, uint8_t PinNo, uint8_t value)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
 80004a0:	4613      	mov	r3, r2
 80004a2:	70bb      	strb	r3, [r7, #2]
	if (value == GPIO_Set)
 80004a4:	78bb      	ldrb	r3, [r7, #2]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d109      	bne.n	80004be <GPIO_Write_toOutputPin+0x2a>
	{
		pGPIOx -> ODR |= (1<<PinNo);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	78fa      	ldrb	r2, [r7, #3]
 80004b0:	2101      	movs	r1, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	431a      	orrs	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx -> ODR &= ~(1<<PinNo);
	}
}
 80004bc:	e009      	b.n	80004d2 <GPIO_Write_toOutputPin+0x3e>
		pGPIOx -> ODR &= ~(1<<PinNo);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	78fa      	ldrb	r2, [r7, #3]
 80004c4:	2101      	movs	r1, #1
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	43d2      	mvns	r2, r2
 80004cc:	401a      	ands	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	615a      	str	r2, [r3, #20]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <delay>:

#include "STM32F407xx.h"
#include "STM32F407xx_gpio_driver.h"
#include <stdio.h>
void delay()
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0

	for (uint32_t i = 0; i < 50000; i++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	e002      	b.n	80004f0 <delay+0x12>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3301      	adds	r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d9f7      	bls.n	80004ea <delay+0xc>
	{
		//do nothing
	}
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <main>:

int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOLed;
	GPIOLed.pGPIOx = GPIOD;
 800050e:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <main+0x80>)
 8000510:	60fb      	str	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_Pin_No_12;
 8000512:	230c      	movs	r3, #12
 8000514:	743b      	strb	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_Mode_Out;
 8000516:	2301      	movs	r3, #1
 8000518:	747b      	strb	r3, [r7, #17]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPType_PuPd;
 800051a:	2300      	movs	r3, #0
 800051c:	74fb      	strb	r3, [r7, #19]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_Speed_High;
 800051e:	2303      	movs	r3, #3
 8000520:	74bb      	strb	r3, [r7, #18]
	GPIOLed.GPIO_PinConfig.GPIO_PinPupdControl = GPIO_Pin_NoPupd;
 8000522:	2300      	movs	r3, #0
 8000524:	753b      	strb	r3, [r7, #20]
	GPIO_Peri_CLKControl(GPIOD, ENABLE);
 8000526:	2101      	movs	r1, #1
 8000528:	4817      	ldr	r0, [pc, #92]	; (8000588 <main+0x80>)
 800052a:	f7ff fe5d 	bl	80001e8 <GPIO_Peri_CLKControl>
	GPIO_init(&GPIOLed);
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fed6 	bl	80002e4 <GPIO_init>

	GPIO_Handle_t GPIOUserSwitch;
	GPIOUserSwitch.pGPIOx = GPIOA;
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <main+0x84>)
 800053a:	603b      	str	r3, [r7, #0]
	GPIOUserSwitch.GPIO_PinConfig.GPIO_PinNumber = GPIO_Pin_No_0;
 800053c:	2300      	movs	r3, #0
 800053e:	713b      	strb	r3, [r7, #4]
	GPIOUserSwitch.GPIO_PinConfig.GPIO_PinMode = GPIO_Mode_Input;
 8000540:	2300      	movs	r3, #0
 8000542:	717b      	strb	r3, [r7, #5]
	//GPIOUserSwitch.GPIO_PinConfig.GPIO_PinSpeed = GPIO_Speed_High;
	GPIOUserSwitch.GPIO_PinConfig.GPIO_PinPupdControl = GPIO_Pin_NoPupd;
 8000544:	2300      	movs	r3, #0
 8000546:	723b      	strb	r3, [r7, #8]
	GPIO_Peri_CLKControl(GPIOA, ENABLE);
 8000548:	2101      	movs	r1, #1
 800054a:	4810      	ldr	r0, [pc, #64]	; (800058c <main+0x84>)
 800054c:	f7ff fe4c 	bl	80001e8 <GPIO_Peri_CLKControl>
	GPIO_init(&GPIOUserSwitch);
 8000550:	463b      	mov	r3, r7
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fec6 	bl	80002e4 <GPIO_init>

	while (1)
	{
		if (GPIO_Read_fromInputPin(GPIOA, GPIO_Pin_No_0))
 8000558:	2100      	movs	r1, #0
 800055a:	480c      	ldr	r0, [pc, #48]	; (800058c <main+0x84>)
 800055c:	f7ff ff82 	bl	8000464 <GPIO_Read_fromInputPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d007      	beq.n	8000576 <main+0x6e>
		{
			GPIO_Write_toOutputPin(GPIOD, GPIO_Pin_No_12, ENABLE);
 8000566:	2201      	movs	r2, #1
 8000568:	210c      	movs	r1, #12
 800056a:	4807      	ldr	r0, [pc, #28]	; (8000588 <main+0x80>)
 800056c:	f7ff ff92 	bl	8000494 <GPIO_Write_toOutputPin>
			delay();
 8000570:	f7ff ffb5 	bl	80004de <delay>
 8000574:	e7f0      	b.n	8000558 <main+0x50>
		}
		else
		{
			GPIO_Write_toOutputPin(GPIOD, GPIO_Pin_No_12, DISABLE);
 8000576:	2200      	movs	r2, #0
 8000578:	210c      	movs	r1, #12
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <main+0x80>)
 800057c:	f7ff ff8a 	bl	8000494 <GPIO_Write_toOutputPin>
			delay();
 8000580:	f7ff ffad 	bl	80004de <delay>
		if (GPIO_Read_fromInputPin(GPIOA, GPIO_Pin_No_0))
 8000584:	e7e8      	b.n	8000558 <main+0x50>
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00
 800058c:	40020000 	.word	0x40020000

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000594:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005be:	f000 f811 	bl	80005e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff ffa1 	bl	8000508 <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005d4:	0800064c 	.word	0x0800064c
  ldr r2, =_sbss
 80005d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005dc:	2000001c 	.word	0x2000001c

080005e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC_IRQHandler>
	...

080005e4 <__libc_init_array>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	4e0d      	ldr	r6, [pc, #52]	; (800061c <__libc_init_array+0x38>)
 80005e8:	4c0d      	ldr	r4, [pc, #52]	; (8000620 <__libc_init_array+0x3c>)
 80005ea:	1ba4      	subs	r4, r4, r6
 80005ec:	10a4      	asrs	r4, r4, #2
 80005ee:	2500      	movs	r5, #0
 80005f0:	42a5      	cmp	r5, r4
 80005f2:	d109      	bne.n	8000608 <__libc_init_array+0x24>
 80005f4:	4e0b      	ldr	r6, [pc, #44]	; (8000624 <__libc_init_array+0x40>)
 80005f6:	4c0c      	ldr	r4, [pc, #48]	; (8000628 <__libc_init_array+0x44>)
 80005f8:	f000 f818 	bl	800062c <_init>
 80005fc:	1ba4      	subs	r4, r4, r6
 80005fe:	10a4      	asrs	r4, r4, #2
 8000600:	2500      	movs	r5, #0
 8000602:	42a5      	cmp	r5, r4
 8000604:	d105      	bne.n	8000612 <__libc_init_array+0x2e>
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800060c:	4798      	blx	r3
 800060e:	3501      	adds	r5, #1
 8000610:	e7ee      	b.n	80005f0 <__libc_init_array+0xc>
 8000612:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000616:	4798      	blx	r3
 8000618:	3501      	adds	r5, #1
 800061a:	e7f2      	b.n	8000602 <__libc_init_array+0x1e>
 800061c:	08000644 	.word	0x08000644
 8000620:	08000644 	.word	0x08000644
 8000624:	08000644 	.word	0x08000644
 8000628:	08000648 	.word	0x08000648

0800062c <_init>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr

08000638 <_fini>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr
