
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800068c  08000694  00010694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800068c  0800068c  00010694  2**0
                  CONTENTS
  4 .ARM          00000000  0800068c  0800068c  00010694  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800068c  08000694  00010694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800068c  0800068c  0001068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000690  08000690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000694  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000694  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010694  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000079a  00000000  00000000  000106c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001f0  00000000  00000000  00010e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  00011050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000080  00000000  00000000  000110f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000012a1  00000000  00000000  00011178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000963  00000000  00000000  00012419  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004df2  00000000  00000000  00012d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00017b6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  00017bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000674 	.word	0x08000674

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000674 	.word	0x08000674

080001e8 <GPIO_PeriphClkCtrl>:
 *      Author: milind
 */
#include "STM32F407xx_gpio_driver.h"

void GPIO_PeriphClkCtrl(GPIO_REGDEF_t *pGPIOx, uint8_t EnOrDis)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
    if(EnOrDis == ENABLE){
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d161      	bne.n	80002be <GPIO_PeriphClkCtrl+0xd6>
        if(pGPIOx == GPIOA){
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a33      	ldr	r2, [pc, #204]	; (80002cc <GPIO_PeriphClkCtrl+0xe4>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriphClkCtrl+0x28>
            GPIOA_PCLK_EN();
 8000202:	4b33      	ldr	r3, [pc, #204]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a32      	ldr	r2, [pc, #200]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
        }
    }
    else{
        //Disable
    }
}
 800020e:	e056      	b.n	80002be <GPIO_PeriphClkCtrl+0xd6>
        else if(pGPIOx == GPIOB){
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a30      	ldr	r2, [pc, #192]	; (80002d4 <GPIO_PeriphClkCtrl+0xec>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriphClkCtrl+0x3e>
            GPIOB_PCLK_EN();
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e04b      	b.n	80002be <GPIO_PeriphClkCtrl+0xd6>
        else if(pGPIOx == GPIOC){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <GPIO_PeriphClkCtrl+0xf0>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriphClkCtrl+0x54>
            GPIOC_PCLK_EN();
 800022e:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a27      	ldr	r2, [pc, #156]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e040      	b.n	80002be <GPIO_PeriphClkCtrl+0xd6>
        else if(pGPIOx == GPIOD){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a27      	ldr	r2, [pc, #156]	; (80002dc <GPIO_PeriphClkCtrl+0xf4>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriphClkCtrl+0x6a>
            GPIOD_PCLK_EN();
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e035      	b.n	80002be <GPIO_PeriphClkCtrl+0xd6>
        else if(pGPIOx == GPIOE){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a22      	ldr	r2, [pc, #136]	; (80002e0 <GPIO_PeriphClkCtrl+0xf8>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriphClkCtrl+0x80>
            GPIOE_PCLK_EN();
 800025a:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a1c      	ldr	r2, [pc, #112]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e02a      	b.n	80002be <GPIO_PeriphClkCtrl+0xd6>
        else if(pGPIOx == GPIOF){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a1e      	ldr	r2, [pc, #120]	; (80002e4 <GPIO_PeriphClkCtrl+0xfc>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriphClkCtrl+0x96>
            GPIOF_PCLK_EN();
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e01f      	b.n	80002be <GPIO_PeriphClkCtrl+0xd6>
        else if(pGPIOx == GPIOG){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <GPIO_PeriphClkCtrl+0x100>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriphClkCtrl+0xac>
            GPIOG_PCLK_EN();
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e014      	b.n	80002be <GPIO_PeriphClkCtrl+0xd6>
        else if(pGPIOx == GPIOH){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <GPIO_PeriphClkCtrl+0x104>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriphClkCtrl+0xc2>
            GPIOH_PCLK_EN();
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e009      	b.n	80002be <GPIO_PeriphClkCtrl+0xd6>
        else if(pGPIOx == GPIOI){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <GPIO_PeriphClkCtrl+0x108>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d105      	bne.n	80002be <GPIO_PeriphClkCtrl+0xd6>
            GPIOI_PCLK_EN();
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <GPIO_PeriphClkCtrl+0xe8>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020400 	.word	0x40020400
 80002d8:	40020800 	.word	0x40020800
 80002dc:	40020c00 	.word	0x40020c00
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40021400 	.word	0x40021400
 80002e8:	40021800 	.word	0x40021800
 80002ec:	40021c00 	.word	0x40021c00
 80002f0:	40022000 	.word	0x40022000

080002f4 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *GPIO_Handle)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
    //Init mode
    uint32_t temp = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
    temp = (GPIO_Handle->GPIO_PinConfig.PinMode << (2 * GPIO_Handle->GPIO_PinConfig.PinNumber));
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	795b      	ldrb	r3, [r3, #5]
 8000304:	461a      	mov	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	791b      	ldrb	r3, [r3, #4]
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	fa02 f303 	lsl.w	r3, r2, r3
 8000310:	60fb      	str	r3, [r7, #12]
    GPIO_Handle->pGPIOx->MODER &= ~(0x3 << (2 * GPIO_Handle->GPIO_PinConfig.PinNumber));
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	791b      	ldrb	r3, [r3, #4]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	2103      	movs	r1, #3
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	43db      	mvns	r3, r3
 8000326:	4619      	mov	r1, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	400a      	ands	r2, r1
 800032e:	601a      	str	r2, [r3, #0]
    GPIO_Handle->pGPIOx->MODER |= temp;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	6819      	ldr	r1, [r3, #0]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	68fa      	ldr	r2, [r7, #12]
 800033c:	430a      	orrs	r2, r1
 800033e:	601a      	str	r2, [r3, #0]

    //Init speed
    temp = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
    temp = (GPIO_Handle->GPIO_PinConfig.PinSpeed << (2 * GPIO_Handle->GPIO_PinConfig.PinNumber));
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	799b      	ldrb	r3, [r3, #6]
 8000348:	461a      	mov	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	791b      	ldrb	r3, [r3, #4]
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	fa02 f303 	lsl.w	r3, r2, r3
 8000354:	60fb      	str	r3, [r7, #12]
    GPIO_Handle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIO_Handle->GPIO_PinConfig.PinNumber));
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	791b      	ldrb	r3, [r3, #4]
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	2103      	movs	r1, #3
 8000364:	fa01 f303 	lsl.w	r3, r1, r3
 8000368:	43db      	mvns	r3, r3
 800036a:	4619      	mov	r1, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	400a      	ands	r2, r1
 8000372:	609a      	str	r2, [r3, #8]
    GPIO_Handle->pGPIOx->OSPEEDR |= temp;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	6899      	ldr	r1, [r3, #8]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	430a      	orrs	r2, r1
 8000382:	609a      	str	r2, [r3, #8]

    //Init pull-up and pull-down
    temp = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
    temp = (GPIO_Handle->GPIO_PinConfig.PinPuPdCtrl << (2 * GPIO_Handle->GPIO_PinConfig.PinNumber));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	7a1b      	ldrb	r3, [r3, #8]
 800038c:	461a      	mov	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	791b      	ldrb	r3, [r3, #4]
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	fa02 f303 	lsl.w	r3, r2, r3
 8000398:	60fb      	str	r3, [r7, #12]
    GPIO_Handle->pGPIOx->PUPDR &= ~(0x3 << (2 * GPIO_Handle->GPIO_PinConfig.PinNumber));
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	68da      	ldr	r2, [r3, #12]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	791b      	ldrb	r3, [r3, #4]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	2103      	movs	r1, #3
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	43db      	mvns	r3, r3
 80003ae:	4619      	mov	r1, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	400a      	ands	r2, r1
 80003b6:	60da      	str	r2, [r3, #12]
    GPIO_Handle->pGPIOx->PUPDR |= temp;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	68d9      	ldr	r1, [r3, #12]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	60da      	str	r2, [r3, #12]

    //Init output type
    temp = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
    temp = (GPIO_Handle->GPIO_PinConfig.PinOpType << GPIO_Handle->GPIO_PinConfig.PinNumber);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	79db      	ldrb	r3, [r3, #7]
 80003d0:	461a      	mov	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	791b      	ldrb	r3, [r3, #4]
 80003d6:	fa02 f303 	lsl.w	r3, r2, r3
 80003da:	60fb      	str	r3, [r7, #12]
    GPIO_Handle->pGPIOx->OTYPER &= ~(0x1 << (2 * GPIO_Handle->GPIO_PinConfig.PinNumber));
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	685a      	ldr	r2, [r3, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	2101      	movs	r1, #1
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	43db      	mvns	r3, r3
 80003f0:	4619      	mov	r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	400a      	ands	r2, r1
 80003f8:	605a      	str	r2, [r3, #4]
    GPIO_Handle->pGPIOx->OTYPER |= temp;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	6859      	ldr	r1, [r3, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	430a      	orrs	r2, r1
 8000408:	605a      	str	r2, [r3, #4]

    //Init alternating fuction
    temp = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
    if(GPIO_Handle->GPIO_PinConfig.PinMode == GPIO_MODE_AFN)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	795b      	ldrb	r3, [r3, #5]
 8000412:	2b02      	cmp	r3, #2
 8000414:	d135      	bne.n	8000482 <GPIO_Init+0x18e>
    {
        uint8_t temp1 = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	72bb      	strb	r3, [r7, #10]
        temp1 = GPIO_Handle->GPIO_PinConfig.PinNumber / 8;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	791b      	ldrb	r3, [r3, #4]
 8000422:	08db      	lsrs	r3, r3, #3
 8000424:	72fb      	strb	r3, [r7, #11]
        temp2 = GPIO_Handle->GPIO_PinConfig.PinNumber % 8;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	f003 0307 	and.w	r3, r3, #7
 800042e:	72bb      	strb	r3, [r7, #10]
        GPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	7afa      	ldrb	r2, [r7, #11]
 8000436:	3208      	adds	r2, #8
 8000438:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800043c:	7abb      	ldrb	r3, [r7, #10]
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	220f      	movs	r2, #15
 8000442:	fa02 f303 	lsl.w	r3, r2, r3
 8000446:	43db      	mvns	r3, r3
 8000448:	4618      	mov	r0, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	7afa      	ldrb	r2, [r7, #11]
 8000450:	4001      	ands	r1, r0
 8000452:	3208      	adds	r2, #8
 8000454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        GPIO_Handle->pGPIOx->AFR[temp1] |= GPIO_Handle->GPIO_PinConfig.PinAltFunMode << (4 * temp2);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	7afa      	ldrb	r2, [r7, #11]
 800045e:	3208      	adds	r2, #8
 8000460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	7a5b      	ldrb	r3, [r3, #9]
 8000468:	461a      	mov	r2, r3
 800046a:	7abb      	ldrb	r3, [r7, #10]
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
 8000472:	4618      	mov	r0, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	7afa      	ldrb	r2, [r7, #11]
 800047a:	4301      	orrs	r1, r0
 800047c:	3208      	adds	r2, #8
 800047e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8000482:	bf00      	nop
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <GPIO_ReadFromInputPin>:
        GPIOI_REG_RESET();
    }
}

uint8_t GPIO_ReadFromInputPin(GPIO_REGDEF_t *pGPIOx, uint8_t PinNumber)
{
 800048e:	b480      	push	{r7}
 8000490:	b085      	sub	sp, #20
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	73fb      	strb	r3, [r7, #15]
    value = (uint8_t)(pGPIOx->IDR >> PinNumber) & (0x000000001);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	691a      	ldr	r2, [r3, #16]
 80004a2:	78fb      	ldrb	r3, [r7, #3]
 80004a4:	fa22 f303 	lsr.w	r3, r2, r3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	73fb      	strb	r3, [r7, #15]
    return value;
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <GPIO_WriteToOutputPin>:
    value = (uint16_t)(pGPIOx->IDR);
    return value;
}

void GPIO_WriteToOutputPin(GPIO_REGDEF_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	460b      	mov	r3, r1
 80004c8:	70fb      	strb	r3, [r7, #3]
 80004ca:	4613      	mov	r3, r2
 80004cc:	70bb      	strb	r3, [r7, #2]
    if(value == GPIO_PIN_SET){
 80004ce:	78bb      	ldrb	r3, [r7, #2]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d109      	bne.n	80004e8 <GPIO_WriteToOutputPin+0x2a>
        pGPIOx->ODR |= (1 << PinNumber);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	78fa      	ldrb	r2, [r7, #3]
 80004da:	2101      	movs	r1, #1
 80004dc:	fa01 f202 	lsl.w	r2, r1, r2
 80004e0:	431a      	orrs	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	615a      	str	r2, [r3, #20]
    }
    else{
        pGPIOx->ODR &= ~(1 << PinNumber);
    }
}
 80004e6:	e009      	b.n	80004fc <GPIO_WriteToOutputPin+0x3e>
        pGPIOx->ODR &= ~(1 << PinNumber);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	78fa      	ldrb	r2, [r7, #3]
 80004ee:	2101      	movs	r1, #1
 80004f0:	fa01 f202 	lsl.w	r2, r1, r2
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	401a      	ands	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	615a      	str	r2, [r3, #20]
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <main>:
{
	for(uint32_t i = 0; i <= 0xFFFF; i += 1);
}

int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
	//LED1
	GPIO_Handle_t gpioLed1;
	gpioLed1.pGPIOx = GPIOD;
 800050e:	4b30      	ldr	r3, [pc, #192]	; (80005d0 <main+0xc8>)
 8000510:	61bb      	str	r3, [r7, #24]
	gpioLed1.GPIO_PinConfig.PinNumber = GPIO_PIN_NO_12;
 8000512:	230c      	movs	r3, #12
 8000514:	773b      	strb	r3, [r7, #28]
	gpioLed1.GPIO_PinConfig.PinMode = GPIO_MODE_OUT;
 8000516:	2301      	movs	r3, #1
 8000518:	777b      	strb	r3, [r7, #29]
	gpioLed1.GPIO_PinConfig.PinOpType = GPIO_OP_TYPE_PP;
 800051a:	2300      	movs	r3, #0
 800051c:	77fb      	strb	r3, [r7, #31]
	gpioLed1.GPIO_PinConfig.PinSpeed = GPIO_SPEED_HIGH;
 800051e:	2302      	movs	r3, #2
 8000520:	77bb      	strb	r3, [r7, #30]
	gpioLed1.GPIO_PinConfig.PinPuPdCtrl = GPIO_NO_PUPD;
 8000522:	2300      	movs	r3, #0
 8000524:	f887 3020 	strb.w	r3, [r7, #32]

	GPIO_PeriphClkCtrl(GPIOD, ENABLE);	//gpioLed.pGPIOx = GPIOD
 8000528:	2101      	movs	r1, #1
 800052a:	4829      	ldr	r0, [pc, #164]	; (80005d0 <main+0xc8>)
 800052c:	f7ff fe5c 	bl	80001e8 <GPIO_PeriphClkCtrl>
	GPIO_Init(&gpioLed1);
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fedd 	bl	80002f4 <GPIO_Init>

	//LED2
	GPIO_Handle_t gpioLed2;
	gpioLed2.pGPIOx = GPIOD;
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <main+0xc8>)
 800053c:	60fb      	str	r3, [r7, #12]
	gpioLed2.GPIO_PinConfig.PinNumber = GPIO_PIN_NO_13;
 800053e:	230d      	movs	r3, #13
 8000540:	743b      	strb	r3, [r7, #16]
	gpioLed2.GPIO_PinConfig.PinMode = GPIO_MODE_OUT;
 8000542:	2301      	movs	r3, #1
 8000544:	747b      	strb	r3, [r7, #17]
	gpioLed2.GPIO_PinConfig.PinOpType = GPIO_OP_TYPE_PP;
 8000546:	2300      	movs	r3, #0
 8000548:	74fb      	strb	r3, [r7, #19]
	gpioLed2.GPIO_PinConfig.PinSpeed = GPIO_SPEED_HIGH;
 800054a:	2302      	movs	r3, #2
 800054c:	74bb      	strb	r3, [r7, #18]
	gpioLed2.GPIO_PinConfig.PinPuPdCtrl = GPIO_NO_PUPD;
 800054e:	2300      	movs	r3, #0
 8000550:	753b      	strb	r3, [r7, #20]

	GPIO_PeriphClkCtrl(GPIOD, ENABLE);	//gpioLed.pGPIOx = GPIOD
 8000552:	2101      	movs	r1, #1
 8000554:	481e      	ldr	r0, [pc, #120]	; (80005d0 <main+0xc8>)
 8000556:	f7ff fe47 	bl	80001e8 <GPIO_PeriphClkCtrl>
	GPIO_Init(&gpioLed2);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fec8 	bl	80002f4 <GPIO_Init>

	//Push button
	GPIO_Handle_t gpioButton;
	gpioButton.pGPIOx = GPIOA;
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <main+0xcc>)
 8000566:	603b      	str	r3, [r7, #0]
	gpioButton.GPIO_PinConfig.PinNumber = GPIO_PIN_NO_0;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
	gpioButton.GPIO_PinConfig.PinMode = GPIO_MODE_IN;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
	gpioButton.GPIO_PinConfig.PinOpType = GPIO_OP_TYPE_PP;
 8000570:	2300      	movs	r3, #0
 8000572:	71fb      	strb	r3, [r7, #7]
	gpioButton.GPIO_PinConfig.PinSpeed = GPIO_SPEED_HIGH;
 8000574:	2302      	movs	r3, #2
 8000576:	71bb      	strb	r3, [r7, #6]
	gpioButton.GPIO_PinConfig.PinPuPdCtrl = GPIO_NO_PUPD;
 8000578:	2300      	movs	r3, #0
 800057a:	723b      	strb	r3, [r7, #8]

	GPIO_PeriphClkCtrl(GPIOA, ENABLE);
 800057c:	2101      	movs	r1, #1
 800057e:	4815      	ldr	r0, [pc, #84]	; (80005d4 <main+0xcc>)
 8000580:	f7ff fe32 	bl	80001e8 <GPIO_PeriphClkCtrl>
	GPIO_Init(&gpioButton);
 8000584:	463b      	mov	r3, r7
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff feb4 	bl	80002f4 <GPIO_Init>

	while(1)
	{
//		GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
//		delay();
		uint8_t buttonStatus = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0);
 800058c:	2100      	movs	r1, #0
 800058e:	4811      	ldr	r0, [pc, #68]	; (80005d4 <main+0xcc>)
 8000590:	f7ff ff7d 	bl	800048e <GPIO_ReadFromInputPin>
 8000594:	4603      	mov	r3, r0
 8000596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(buttonStatus){
 800059a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00a      	beq.n	80005b8 <main+0xb0>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	210c      	movs	r1, #12
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <main+0xc8>)
 80005a8:	f7ff ff89 	bl	80004be <GPIO_WriteToOutputPin>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_13, SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	210d      	movs	r1, #13
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <main+0xc8>)
 80005b2:	f7ff ff84 	bl	80004be <GPIO_WriteToOutputPin>
 80005b6:	e7e9      	b.n	800058c <main+0x84>
		}
		else{
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	210c      	movs	r1, #12
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <main+0xc8>)
 80005be:	f7ff ff7e 	bl	80004be <GPIO_WriteToOutputPin>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_13, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	210d      	movs	r1, #13
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <main+0xc8>)
 80005c8:	f7ff ff79 	bl	80004be <GPIO_WriteToOutputPin>
	{
 80005cc:	e7de      	b.n	800058c <main+0x84>
 80005ce:	bf00      	nop
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	40020000 	.word	0x40020000

080005d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <LoopForever+0xe>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f8:	4c0a      	ldr	r4, [pc, #40]	; (8000624 <LoopForever+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000606:	f000 f811 	bl	800062c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff ff7d 	bl	8000508 <main>

0800060e <LoopForever>:

LoopForever:
    b LoopForever
 800060e:	e7fe      	b.n	800060e <LoopForever>
  ldr   r0, =_estack
 8000610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800061c:	08000694 	.word	0x08000694
  ldr r2, =_sbss
 8000620:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000624:	2000001c 	.word	0x2000001c

08000628 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC_IRQHandler>
	...

0800062c <__libc_init_array>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	4e0d      	ldr	r6, [pc, #52]	; (8000664 <__libc_init_array+0x38>)
 8000630:	4c0d      	ldr	r4, [pc, #52]	; (8000668 <__libc_init_array+0x3c>)
 8000632:	1ba4      	subs	r4, r4, r6
 8000634:	10a4      	asrs	r4, r4, #2
 8000636:	2500      	movs	r5, #0
 8000638:	42a5      	cmp	r5, r4
 800063a:	d109      	bne.n	8000650 <__libc_init_array+0x24>
 800063c:	4e0b      	ldr	r6, [pc, #44]	; (800066c <__libc_init_array+0x40>)
 800063e:	4c0c      	ldr	r4, [pc, #48]	; (8000670 <__libc_init_array+0x44>)
 8000640:	f000 f818 	bl	8000674 <_init>
 8000644:	1ba4      	subs	r4, r4, r6
 8000646:	10a4      	asrs	r4, r4, #2
 8000648:	2500      	movs	r5, #0
 800064a:	42a5      	cmp	r5, r4
 800064c:	d105      	bne.n	800065a <__libc_init_array+0x2e>
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000654:	4798      	blx	r3
 8000656:	3501      	adds	r5, #1
 8000658:	e7ee      	b.n	8000638 <__libc_init_array+0xc>
 800065a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800065e:	4798      	blx	r3
 8000660:	3501      	adds	r5, #1
 8000662:	e7f2      	b.n	800064a <__libc_init_array+0x1e>
 8000664:	0800068c 	.word	0x0800068c
 8000668:	0800068c 	.word	0x0800068c
 800066c:	0800068c 	.word	0x0800068c
 8000670:	08000690 	.word	0x08000690

08000674 <_init>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	bf00      	nop
 8000678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067a:	bc08      	pop	{r3}
 800067c:	469e      	mov	lr, r3
 800067e:	4770      	bx	lr

08000680 <_fini>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	bf00      	nop
 8000684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000686:	bc08      	pop	{r3}
 8000688:	469e      	mov	lr, r3
 800068a:	4770      	bx	lr
